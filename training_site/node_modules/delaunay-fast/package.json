{
  "_args": [
    [
      {
        "raw": "delaunay-fast",
        "scope": null,
        "escapedName": "delaunay-fast",
        "name": "delaunay-fast",
        "rawSpec": "",
        "spec": "latest",
        "type": "tag"
      },
      "/home/earnu/Github/AgniProject/training_site"
    ]
  ],
  "_from": "delaunay-fast@latest",
  "_id": "delaunay-fast@1.0.1",
  "_inCache": true,
  "_location": "/delaunay-fast",
  "_npmUser": {
    "name": "darkskyapp",
    "email": "developer@forecast.io"
  },
  "_npmVersion": "1.3.11",
  "_phantomChildren": {},
  "_requested": {
    "raw": "delaunay-fast",
    "scope": null,
    "escapedName": "delaunay-fast",
    "name": "delaunay-fast",
    "rawSpec": "",
    "spec": "latest",
    "type": "tag"
  },
  "_requiredBy": [
    "#USER"
  ],
  "_resolved": "https://registry.npmjs.org/delaunay-fast/-/delaunay-fast-1.0.1.tgz",
  "_shasum": "b50507cb0f1ff850ada0002b9e3ac289a7b52649",
  "_shrinkwrap": null,
  "_spec": "delaunay-fast",
  "_where": "/home/earnu/Github/AgniProject/training_site",
  "author": {
    "name": "J. T. L."
  },
  "bugs": {
    "url": "https://github.com/ironwallaby/delaunay/issues"
  },
  "dependencies": {},
  "description": "Fast Delaunay Triangulation in JavaScript",
  "devDependencies": {},
  "directories": {},
  "dist": {
    "shasum": "b50507cb0f1ff850ada0002b9e3ac289a7b52649",
    "tarball": "https://registry.npmjs.org/delaunay-fast/-/delaunay-fast-1.0.1.tgz"
  },
  "gitHead": "95feef2054313410efe336a1618699c4c96e507d",
  "homepage": "https://github.com/ironwallaby/delaunay#readme",
  "keywords": [
    "delaunay",
    "triangulation",
    "geometry"
  ],
  "license": "BSD",
  "main": "delaunay.js",
  "maintainers": [
    {
      "name": "darkskyapp",
      "email": "devsupport@darkskyapp.com"
    }
  ],
  "name": "delaunay-fast",
  "optionalDependencies": {},
  "readme": "This is just a quick little implementation of [Delaunay Triangulation][1] in\nJavaScript. It was mostly ported from [Paul Bourke's C implementation][2], but\nI referenced some bits from [another JavaScript implementation][3] and rewrote\na bunch of things in ways more amenable to fast JavaScript execution.\n\nEssentially, you pass Delaunay.triangulate a list of vertices (which should be\na bunch of two-element arrays, representing 2D Euclidean points), and it will\nreturn you a giant array, arranged in triplets, representing triangles by\nindices into the passed array. (This representation is a little bizarre, but\nobject allocation is too slow for this library's [original use case][4]. Yes,\nreally.)\n\n[1]: http://en.wikipedia.org/wiki/Delaunay_triangulation\n[2]: http://paulbourke.net/papers/triangulate/\n[3]: http://www.travellermap.com/tmp/delaunay.htm\n[4]: http://forecast.io/\n\nNotably, it runs in subquadratic time, making it the fastest JavaScript\nimplementation of which I'm aware. (Okay, it doesn't really, but it'd be\ntrivial to modify to run in subquadratic time, I just havn't done so yet.)\n\nThis software is released into the public domain.\n",
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "git+https://github.com/ironwallaby/delaunay.git"
  },
  "scripts": {
    "test": "echo \"Error: no test specified\" && exit 1"
  },
  "version": "1.0.1"
}
